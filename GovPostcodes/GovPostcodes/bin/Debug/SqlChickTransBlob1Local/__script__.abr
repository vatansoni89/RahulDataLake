<?xml version="1.0" encoding="utf-8"?>
<ScriptAndGraph GraphType="VertexCommands">
  <Vertices count="1">
    <Vertex index="1" command="-scopeVertex SV1_Extract  -i C:\Users\Z003D4KS\AppData\Local\USQLDataRoot\TransformedBlobData\Source\1.blob -i C:\Users\Z003D4KS\AppData\Local\USQLDataRoot\TransformedBlobData\Source\9.blob  -o D:\Vatan\Learnings\DataLake\RahulDataLake\GovPostcodes\GovPostcodes\bin\Debug\SqlChickTransBlob1Local\_TMP\scopetmpfile._SV1_Extract_out0(WITH_HEADER)" />
    <Vertex command="-concatenate -i D:\Vatan\Learnings\DataLake\RahulDataLake\GovPostcodes\GovPostcodes\bin\Debug\SqlChickTransBlob1Local\_TMP\scopetmpfile._SV1_Extract_out0 -o C:\Users\Z003D4KS\AppData\Local\USQLDataRoot\TransformedBlobData\OutputVatan\transBlobOutput12.csv" />
  </Vertices>
  <Outputs>
    <Output path="C:\Users\Z003D4KS\AppData\Local\USQLDataRoot\TransformedBlobData\OutputVatan\transBlobOutput12.csv" isBinary="False" schema="Country:string,Province:string,City:string,OsVersion:string,RoleName:string,Category:string" />
  </Outputs>
  <graph serveForThirdParty="True" JsonErrors="True" JobType="BatchSqlIp" MaxPercentInputUnavailability="0" vertexExecutable="scopehost.exe" BroadcastCopyThroughCommandLine="ScopeEngine.dll -scopeVertex SV_CopyThrough">
    <process id="SV1_Extract" command="ScopeEngine.dll -scopeVertex SV1_Extract" managedMemorySize="859832320" nativeIOMemorySize="33554434" nativeExecutionMemorySize="8388608" DummyVertexOptimization="AllInputsEmptyImpliesOutputsEmpty|RunAtLeastOneVertex" trustedVertex="True">
      <input id="Extract_0[ALL]" streamSize="47414">
        <cosmosStream cosmosPath="C:\Users\Z003D4KS\AppData\Local\USQLDataRoot\TransformedBlobData\Source\1.blob" streamSize="46624" />
        <cosmosStream cosmosPath="C:\Users\Z003D4KS\AppData\Local\USQLDataRoot\TransformedBlobData\Source\9.blob" streamSize="790" />
      </input>
      <output id="SV1_Extract_out0" cosmosStream="C:\Users\Z003D4KS\AppData\Local\USQLDataRoot\TransformedBlobData\OutputVatan\transBlobOutput12.csv" />
    </process>
    <metadataoperation exeName="MetaDataExecutor.exe" argument="&quot;commit&quot; &quot;-CosmosCluster&quot; &quot;localhost&quot; &quot;-APEnvironment&quot; &quot;Default&quot; &quot;-APCluster&quot; &quot;localhost&quot;">
      <MetadataJob xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/Scope.Metadata.Contract">
        <StorageInfo>
          <DataRoot>C:\Users\Z003D4KS\AppData\Local\USQLDataRoot</DataRoot>
          <MountPointName>_catalog_</MountPointName>
          <MountPointPhysicalPath>C:\Users\Z003D4KS\AppData\Local\USQLDataRoot/_catalog_/</MountPointPhysicalPath>
        </StorageInfo>
        <OperationsSequence>
          <MetadataOperation i:type="AssertEntityExistsOperation">
            <Entity>
              <Id>7581a0d4-e4f2-43b7-b27a-377a2230e5a0</Id>
              <Name>
                <Server>localcomputeaccount</Server>
                <FirstPart>master</FirstPart>
                <SecondPart>Newtonsoft.Json</SecondPart>
              </Name>
            </Entity>
            <LastModificationTime i:nil="true" />
            <TypeName>Scope.Metadata.Contract.AssemblyInfo</TypeName>
          </MetadataOperation>
          <MetadataOperation i:type="AssertEntityExistsOperation">
            <Entity>
              <Id>16579bca-114a-40cd-b6d0-8c22a31773d8</Id>
              <Name>
                <Server>localcomputeaccount</Server>
                <FirstPart>master</FirstPart>
                <SecondPart>Microsoft.Analytics.Samples.Formats</SecondPart>
              </Name>
            </Entity>
            <LastModificationTime i:nil="true" />
            <TypeName>Scope.Metadata.Contract.AssemblyInfo</TypeName>
          </MetadataOperation>
        </OperationsSequence>
        <ScopeJobInfo>
          <JobGuid>00000000-0000-0000-0000-000000000000</JobGuid>
          <JobName></JobName>
        </ScopeJobInfo>
      </MetadataJob>
    </metadataoperation>
  </graph>
  <Scopescript>// Auto-generated header code

// Auto-generated header code ended
// User script

// A. CREATE ASSEMBLY: Register assemblies (if they do not already exist).
CREATE ASSEMBLY IF NOT EXISTS [Newtonsoft.Json] FROM @"/Assemblies/Newtonsoft.Json.dll";
CREATE ASSEMBLY IF NOT EXISTS [Microsoft.Analytics.Samples.Formats] FROM @"/Assemblies/Microsoft.Analytics.Samples.Formats.dll";
 
// B. REFERENCE ASSEMBLY: Load assemblies for compile time and execution.
REFERENCE ASSEMBLY [Newtonsoft.Json];
REFERENCE ASSEMBLY [Microsoft.Analytics.Samples.Formats];

// C. USING: Specify namespace to shorten function names (e.g. Microsoft.Analytics.Samples.Formats.Json.JsonExtractor)
USING Microsoft.Analytics.Samples.Formats.Json;

// 1. Initialise variables for Input (e.g. JSON) and Output (e.g. CSV).
//DECLARE @InputFile string = @"adl://govbiv.azuredatalakestore.net/BigData/MultiLevelChrome.json";
//DECLARE @InputFile string = @"adl://govbiv.azuredatalakestore.net/BigData/Size84CommaSeparated.blob";
//DECLARE @InputFile string = @"adl://govbiv.azuredatalakestore.net/BigData/BigSize84CommaSeparated.blob";

// @InputFile string = @"adl://govbiv.azuredatalakestore.net/BigData/MultiLevelChrome1CountryMiss.json";


//DECLARE @countProvinceBasedOnCountryFile string = @"adl://govbiv.azuredatalakestore.net/BigData/countProvinceBasedOnCountry.csv";
//DECLARE @countryProvinceFile string = @"adl://govbiv.azuredatalakestore.net/BigData/countryProvince.csv";

//DECLARE @sqlChickOutputFile string = @"adl://govbiv.azuredatalakestore.net/BigData/sqlChickOutput.csv";
DECLARE @InputFile string = @"/TransformedBlobData/Source/{*}";
DECLARE @output string = @"/TransformedBlobData/OutputVatan/transBlobOutput12.csv";


@json  =
    EXTRACT location String,
            device String,
            custom String
    FROM @InputFile
    USING new Microsoft.Analytics.Samples.Formats.Json.JsonExtractor("context");

@CreateJSONTuple =
    SELECT JsonFunctions.JsonTuple(location) AS LocationData,
           JsonFunctions.JsonTuple(device) AS DeviceData,
           JsonFunctions.JsonTuple(custom, "dimensions[0]") AS DimensionData0,
           JsonFunctions.JsonTuple(custom, "dimensions[1]") AS DimensionData1,
           JsonFunctions.JsonTuple(custom, "dimensions[2]") AS DimensionData2,
           JsonFunctions.JsonTuple(custom, "dimensions[100]") AS DimensionData100 //Just to see what happen if we go out of range, and it dont give exception
    FROM @json;

@result =
    SELECT LocationData["country"] ?? "N/A" AS Country,
           LocationData["province"] ?? "N/A" AS Province,
           LocationData["city"] ?? "N/A" AS City,
           DeviceData["osVersion"] ?? "N/A" AS OsVersion,
           DeviceData["roleName"] ?? "N/A" AS RoleName,
           DimensionData0["dimensions[0]"] AS CategoryDimension0,
           DimensionData1["dimensions[1]"] AS CategoryDimension1,
           DimensionData2["dimensions[2]"] AS CategoryDimension2,
           DimensionData2["dimensions[100]"] AS CategoryDimension100
    FROM @CreateJSONTuple;

@result =
    SELECT Country,
           Province,
           City,
           OsVersion,
           RoleName,
           JsonFunctions.JsonTuple(CategoryDimension0) AS CategoryDimension0,
           JsonFunctions.JsonTuple(CategoryDimension1) AS CategoryDimension1,
           JsonFunctions.JsonTuple(CategoryDimension2) AS CategoryDimension2,
           JsonFunctions.JsonTuple(CategoryDimension100) AS CategoryDimension100
    FROM @result;

@result =
    SELECT Country,
           Province,
           City,
           OsVersion,
           RoleName,
           CategoryDimension0["Category"] ?? CategoryDimension1["Category"] ?? CategoryDimension2["Category"] ?? CategoryDimension100["Category"] ?? "N/A" AS Category
    FROM @result;

OUTPUT @result
TO @output
USING Outputters.Csv(outputHeader : true, quoting : true);

//// 3. Write values to CSV
//OUTPUT @countryProvince
//TO @countryProvinceFile
//USING Outputters.Csv(outputHeader:true,quoting:true);

// User script ended
// Auto-generated footer code

// Auto-generated footer code ended

</Scopescript>
  <Optimization succeeded="true" time="00:00:00.4170000" latency="-1" totalCost="-1" />
  <ScopeVertexAnnotations>
    <ScopeVertex name="SV1_Extract">
      <Operation annotation="EXTRACT USING JsonExtractor" />
      <Operation annotation="OUTPUT USING IOutputter" />
    </ScopeVertex>
  </ScopeVertexAnnotations>
</ScriptAndGraph>