{"Error":[{"errorId":"E_CSC_USER_CANNOTREADASSEMBLY","severity":"Error","component":"CSC","source":"User","message":"Assembly file 'adl:\/\/govbiv.azuredatalakestore.net\/RahulAssemblies\/Newtonsoft.Json.dll' could not be read.","description":"The assembly file must already exist in the cluster and be accessible.","resolution":"Make sure that the file denotes an existing cluster file and the file is accessible.","details":"at token '@\"adl:\/\/govbiv.azuredatalakestore.net\/RahulAssemblies\/Newtonsoft.Json.dll\"', line 7\r\nnear the ###:\r\n**************\r\n code ended\r\n\/\/ User script\r\n\r\n\/\/ A. CREATE ASSEMBLY: Register assemblies (if they do not already exist).\r\nCREATE ASSEMBLY IF NOT EXISTS [Newtonsoft.Json] FROM  ### @\"adl:\/\/govbiv.azuredatalakestore.net\/RahulAssemblies\/Newtonsoft.Json.dll\";\r\nCREATE ASSEMBLY IF NOT EXISTS [Microsoft.Analytics.Samples.Formats] FROM @\"adl:\/\/go","internalDiagnostics":"ScopeCompiler.CompilationException: E_CSC_USER_CANNOTREADASSEMBLY: Assembly file 'adl:\/\/govbiv.azuredatalakestore.net\/RahulAssemblies\/Newtonsoft.Json.dll' could not be read.\nDescription:\nThe assembly file must already exist in the cluster and be accessible.\nResolution:\nMake sure that the file denotes an existing cluster file and the file is accessible.\r\n ---> System.Exception: Expecting local absolute path: adl:\/\/govbiv.azuredatalakestore.net\/RahulAssemblies\/Newtonsoft.Json.dll\r\n   at ScopeCompiler.Dependencies.Kona.Local.LocalStreamService.GetStreamMetadata(String absolutePath)\r\n   at ScopeCompiler.PathResolver.CheckAbsolutePath(String pathFromScript)\r\n   at ScopeCompiler.PathResolver.GetFullPathInner(String pathFromScript)\r\n   at ScopeCompiler.FrontEnd.Ddl.SqlAssemblyFilesHelper.DownloadClusterFile(String srcClusterPath, String dstLocalFile)\r\n   at ScopeCompiler.FrontEnd.Ddl.AssemblyFilesHelper.DownloadAssemblySource(AssemblySource source)\r\n   --- End of inner exception stack trace ---\r\n   at ScopeCompiler.FrontEnd.Ddl.AssemblyFilesHelper.DownloadAssemblySource(AssemblySource source)\r\n   at ScopeCompiler.FrontEnd.Ddl.SqlDdlResolver.CreateOrDeclareAssemblyInfo(Script input, DdlName ddlName, CreateOrDeclareAssemblyStatement e)\r\n   at ScopeCompiler.FrontEnd.Ddl.SqlDdlResolver.OnCreateAssemblyStatement(Script input, CreateAssemblyStatement e)\r\n   at ScopeCompiler.VisitorContext`1.Visit(T node, Action accept)\r\n   at ScopeCompiler.TreeVisitor`2.Visit(P input, IEnumerable`1 nodes)\r\n   at ScopeCompiler.VisitorContext`1.Visit(T node, Action accept)\r\n   at ScopeCompiler.FrontEnd.Ddl.SqlDdlResolver.OnBatch(Script input, Batch e)\r\n   at ScopeCompiler.VisitorContext`1.Visit(T node, Action accept)\r\n   at ScopeCompiler.FrontEnd.Ddl.SqlDdlResolver.Resolve()\r\n   at ScopeCompiler.FrontEnd.CompilePassHelper.Run(Action pass, Compiler compiler, CompilerTimer timer, Boolean throwOnErrors)\r\n   at ScopeCompiler.FrontEnd.SqlAstBuilder.BuildAst(Compiler compiler, FunctionCall parentCall, NameContext nameContext, SubroutineType subroutineType, Script parent, DiagnosticCollection diagnostics, Script[] legacyScripts)\r\n   at ScopeCompiler.FrontEnd.SqlAstBuilder.BuildAst(Script[] scripts)\r\n   at ScopeCompiler.FrontEnd.SqlCompileStrategy.<>c__DisplayClass7_0.<AstBuildingPass>b__1()\r\n   at ScopeCompiler.FrontEnd.CompilePassHelper.Run(Action pass, Compiler compiler, CompilerTimer timer, Boolean throwOnErrors)\r\n   at ScopeCompiler.FrontEnd.FrontEndRunner.Execute()\r\n   at ScopeCompiler.FrontEnd.CompilePipeline.DoExecutePipeline()\r\n   at ScopeCompiler.FrontEnd.CompilePipeline.DoCompile()","helpLink":"","filePath":null,"lineNumber":7,"startOffset":217,"endOffset":291}]}